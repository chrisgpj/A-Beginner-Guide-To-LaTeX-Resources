# Markup Languages and LaTeX in Context

## Links and References to Some Markup languages

https://www.w3.org/TR/xml/ <br>
The Word Wide Web Consortium is one of the most important organisations in the digital world. Their tutorials are also great: https://www.w3schools.com/. It is worth remembering that Generalised Markup Language was developed into Standardised Generalised Markup Language; a simplified form of that became the basis of the world-wide web, and is called HTML (hypertext Markup Language); and then the progress in this style of language was consolidated by making a simple, but robust and customisable markup language, XML (Exstensible Markup Language). Standardised Generalised Markup Language is, apparenlty, a bit of a camel in that is was designed by committee. But then HTML was too simple, and is is a bit procedural (that is, it says what to do to the text to display it, rather than describing in depth the characteristic of the text). The Exstensible Markup Language come in the middle by being a langauge that takes the form from HTML, but allows more detailed, descriptive schemas to be developed (see below section on 'TEI').

https://tei-c.org/ <br>
The TEI (Text Encoding Initiative) defines a schema (that is, a defined dialect) for XML (Exstensible Markup Lanhuage). The TEI form of XML is designed for fully descriptive markup of text for scholarship. Pilgrim Notebooks uses TEI XML to markup texts before

https://developer.mozilla.org/en-US/docs/Web/XML<br> On a side note: Mozilla (as in the Firefox browser organsiation) is well respected community among software developers, especially in the open sourve community. They provide one of the only web-tutorial collections that does not assume pre-existing knowledge of command-line:
https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line

https://www.markdownguide.org/
Markdown is a non-descriptive markup language: it does not tell you what a word is, only that it needs to be italicised. For a descriptive markup language you will want ot use XML. However, markdown has all the benefits of being a plain-text input and achieving a 'What You Mean is What You Get' style of document preparation, rather than a 'What You See is What You Get' style - all while being incredibly easy to use. Markdown is probably the markup language most closely related to the to the typesetter's markup of old.

## Placing LaTeX in Context

LaTeX can be thought of as a markup langauge, but it is worth keeping in the back of the mind the fact that LaTeX comes from TeX, which is a typesetting software that uses markup and code. It is not really designed from the ground-up as markup langauge. 

However, using LaTeX _well_ is effectively to use a somewhat descriptive markup language, combined with rendering instructions in the form of code. Considering that the whole idea of 'markup' comes from the typesetter's markup of old, that makes sense. LaTeX also makes full use of the 'What You Mean is What You Get' method rather than the 'What You See is What You Get' method - and that means using a plain-text markup as the input so that content and presentation are not conflated.

LaTeX can be used in a procedural sort of way, such as telling words to be emphasised, or for a paragraph to have a line-break after it. However, it is also possible to specifiy rules for a more descriptive markup. An example is marking up titles as 'section'. This means that whatever rules are used for section titles will be applied to that bit of text. It is in the spirit of LaTeX to look at the typography and design over all, setting rules and working in concert with the logical structure of the text to create a pleasing outcome.

Members of the LaTeX community are always eager to point out that the idea of LaTeX is to work with the logical structure rather than fiddling with things at a small scale. Whenever someone asks for a method of doing something unusual, this opiinion is gratuitously expounded, which I think is a bloody waste of words. Donald Knuth made TeX with the ability to fine-tune typography, and people saying that one should not adjust things in LaTeX is downright reductive. One isse with refusing to make novel adjustments in LaTeX is that you tend to accept whatever classes of documents are pre-defined, without alteration and regardless of your typographic skill, thus creating an upper limit to the beauty of LaTeX documents; another problem is that very short or unstructured documents are overlooked, even though LaTeX still offers excellent capability for such documents. A more productive approach that I have seen in the community is to actually answer the qeustion posed (I am embarresed that I find it necessary to say this). It is significant that the most robust and elegant answers tend to involve sorting out a rule in the preamble (even if it quite a complex piece of code), and then using a very concise markup in the actual body of the text. I see this pattern as a testament to the virtue of using a descriptive style of markup, where you say what something is, but then define how to render it elsewhere. So, we do arrive back at the spiirt of LaTeX, but by a much better path.

Because LaTeX is at its best when using a fairly descriptive style of markup, and emphasising customisation of macros rather than intervening in the text, I recommend following up with a bit of research on two areas. Firstly, I recommend reading the document on 'What is Text, Really?', located in this folder. The idea of text having a logical structure is outlined in this article, and that feeds into the second area of research, which is fully descriptive markup. Exstensible Markup Language (XML) is allows a fully descriptive markup that is based on the _structured hierarchy of objects_ model (outlined in the article). Unlike LaTeX and many other markup languages, XML is not so intnent on _doing_ things. Instead, it focuses on describing. The TEI schema of XML is esepcially strong for this. I often use XML before going to LaTeX for many documents, because then I don't lose any information by writing in a more awkward and less-powerful markup language. In effect, I partition LaTeX to where it is most powerful - the typesetting of the text. I will admit that as I get better at LaTeX, it looks more and more like a clean descriptive markup. However, my goal is to develop workflows where I can use Python to transform XML to LaTeX (such tools do already exist, but for a number of reasons, I want to develop my own). XML is such a good markup language that I already decided to use it in concert with LaTeX, even working manually. Markdown is useful for a related reason. It is much simpler than LaTeX, and for simple documents it is much more elegant to write in markdown and then do the easy transformation to LaTeX for when a particularly fine typeset is needed. The point of all this is that I encourage the markup langauge used to be fit-for-purpose.